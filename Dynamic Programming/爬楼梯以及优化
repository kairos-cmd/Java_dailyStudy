//用变量减小空间复杂度
class Solution {
    public int climbStairs(int n) {
        //减小空间复杂度O(1)
        if(n <=1 ){
            return 1;
        }
        int item1 = 1;
        int item2 = 1;
        int item3 = 0; //变量定义在循环之外
        for(int i = 2; i <= n; i++){ //从第二级楼梯开始
            item3 = item1 + item2;
            item1 = item2;
            item2 = item3;  
        }
        return item3;
    }
}



//用递归法来实现，同时用记忆搜索(Memoization)来优化
class Solution {
    public int climbStairs(int n) {
        //Using recursive and memoization to realize this program
        int[] memo = new int[n+1];
        return climbStairsHelper(memo, n);
    }
    public int climbStairsHelper(int[] memo, int n){
        //termination condtion(Placing it on the beginning)
        if(n==0 || n==1){
            return 1;
        }
        if(memo[n] > 0){
            return memo[n];
        }
        Updating the value of memo array
        memo[n] = climbStairsHelper(memo, n-1) + climbStairsHelper(memo, n-2);
        return memo[n];
    }
}w
