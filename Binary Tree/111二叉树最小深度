/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        int depth = 0;
        if(root == null){
            return 0;
        }
        depth = mini(root, depth);
        return depth;
        // int depth = 0;
        // if(root == null){
        //     return depth;
        // }
        // Queue<TreeNode> que = new LinkedList<>();
        // que.offer(root);
        // while(!que.isEmpty()){
        //     int len = que.size();
        //     for(int i=0; i<len; i++){
        //         TreeNode temp = que.poll();
        //         //左右子树都为空时，该节点为最小深度
        //         if(temp.left == null && temp.right == null){
        //             System.out.println(depth);
        //             depth = depth+1;
        //             return depth;
        //         }
        //         if(temp.left != null){
        //             que.offer(temp.left);
        //         }
        //         if(temp.right != null){
        //             que.offer(temp.right);
        //         }
        //     }
        //     depth++;
        // }
        // return depth;
    }
    public int mini(TreeNode root, int depth){
        //因为每次递归都要调用函数，为了防止nullpointerException,请判断root是否为空
        if(root == null){
         return Integer.MAX_VALUE;  
        }
        if(root.left == null && root.right == null){
            return depth+1;
        }
        depth+=1;
        int dep1 = mini(root.left, depth);
        int dep2 = mini(root.right, depth);
        depth = Math.min(dep1, dep2);
        return depth;
    }
}

//还有一种递归解法
// class Solution {
//     /**
//      * 递归法，相比求MaxDepth要复杂点
//      * 因为最小深度是从根节点到最近**叶子节点**的最短路径上的节点数量
//      */
//     public int minDepth(TreeNode root) {
//         if (root == null) {
//             return 0;
//         }
//         int leftDepth = minDepth(root.left);
//         int rightDepth = minDepth(root.right);
//         if (root.left == null) {
//             return rightDepth + 1;
//         }
//         if (root.right == null) {
//             return leftDepth + 1;
//         }
//         // 左右结点都不为null
//         return Math.min(leftDepth, rightDepth) + 1;
//     }
// }
==============================================================================================
上面的递归解法也可以写成如下这种形式：
//确立终止条件,后序遍历求最小高度一样可以得到最小深度
//public int maxDepth(TreeNode root){
//        if(root == null){
//            return 0;
//        }
//        int leftDepth = minDepth(root.left);
//        int rightDepth = minDepth(root.right);
//        if(root.left == null && root.right != null){
//            return 1+rightDepth;
//        }
//        if(root.left != null && root.right == null){
//            return 1+leftDepth;
//        }
//        return 1+Math.min(leftDepth,rightDepth);
//}
