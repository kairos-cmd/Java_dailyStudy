/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        //Recursive-Preorder
        if(root == null){
            return root;
        }
        swap(root);
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }
    //bfs
    //     List<TreeNode> result = new ArrayList<>();
    //     if(root == null){
    //         return root;
    //     }
    //     Deque<TreeNode> deque = new LinkedList<>();
    //     deque.offer(root);
    //     while(!deque.isEmpty()){
    //         int lenSize = deque.size();
    //         TreeNode temp = null;
    //         while(lenSize > 0){
    //             temp = deque.poll();
    //             swap(temp);
    //             if(temp.left != null){
    //                 deque.offer(temp.left);
    //             }
    //             if(temp.right != null){
    //                 deque.offer(temp.right);
    //             }
    //             lenSize--;
    //         }
    //     }
    //     return root;
    // }
    public void swap(TreeNode root) {
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
}
