/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        //Recursive-Preorder
        if(root == null){
            return root;
        }
        swap(root);
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }
    //bfs
    //     List<TreeNode> result = new ArrayList<>();
    //     if(root == null){
    //         return root;
    //     }
    //     Deque<TreeNode> deque = new LinkedList<>();
    //     deque.offer(root);
    //     while(!deque.isEmpty()){
    //         int lenSize = deque.size();
    //         TreeNode temp = null;
    //         while(lenSize > 0){
    //             temp = deque.poll();
    //             swap(temp);
    //             if(temp.left != null){
    //                 deque.offer(temp.left);
    //             }
    //             if(temp.right != null){
    //                 deque.offer(temp.right);
    //             }
    //             lenSize--;
    //         }
    //     }
    //     return root;
    // }
    public void swap(TreeNode root) {
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
}
=====================================================================================================
使用递归法时存在错误：swap(root.left , root.right):
它的 swap 方法存在问题，因为在 Java 中，方法参数传递是按值传递的，这意味着 swap 方法内部交换的是局部变量的引用，而不会影响外部实际的节点连接。要在 Java 中正确地交换两个节点，你需要修改 swap 方法来交换节点的值而不是引用。
这样，通过交换节点的值，你就可以在递归过程中正确地反转树的结构。
在 Java 中，当你创建一个对象（包括类似于树节点的自定义对象）时，你实际上是在内存中为这个对象分配了一块内存空间，然后变量存储的是这块内存空间的引用（即内存地址）。

当你执行这一行代码时：TreeNode temp = node.left;，你创建了一个名为 temp 的变量，并将 node.left 的引用赋值给了它。这意味着 temp 和 node.left 现在指向了内存中相同的节点对象。

因此，当你修改 temp 所指向的节点对象时，实际上也在修改 node.left 所指向的节点对象，因为它们指向同一个对象。这就是为什么 swapValues 方法中的操作会影响到树的结构。

具体来说，这里是 swapValues 方法的操作步骤：

你创建了一个名为 temp 的变量，它指向了 node 的左子树对象。
你将 node 的左子树指向了 node 的右子树对象。
然后，你将 node 的右子树指向了 temp，即原来的左子树对象。
通过这些操作，实际上你交换了 node 的左右子树对象，从而影响了树的结构。

总结起来，因为你在 Java 中操作的是对象的引用，所以当你修改一个引用指向的对象时，所有指向同一对象的引用都会受到影响。
这就是为什么在修正后的代码中，交换节点的值可以正确地反转树的结构，因为你实际上是在修改内存中节点对象的值，而不仅仅是交换引用。
===================================================================================================================
以下是错误代码：
/ public void swap(TreeNode left, TreeNode right){ //Java是值Pass by Value，搞清楚传进去的参数有没有被复制，还是原来的参数是关键
    //     TreeNode temp = left;
    //     left = right;
    //     right = temp;
    // }
