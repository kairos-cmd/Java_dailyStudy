/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        traversal(root);
        return root;
    }
    public void traversal(Node temp){
        if(temp == null){
            return;
        }
        if(temp.left != null){
            temp.left.next = temp.right; 
        }
        if(temp.right != null){
            if(temp.next != null){
                temp.right.next = temp.next.left;
            }else{
                temp.right.next = null;
            }
        }
        traversal(temp.left);
        traversal(temp.right);
    }
}

//迭代法
class Solution {
    public Node connect(Node root) {
        Deque<Node> deque = new LinkedList<>();
        if(root == null){
            return root;
        }
        deque.offer(root);
        Node nodePre = null;
        Node node = null;
        while( !deque.isEmpty()){
            int lenSize = deque.size();
            for(int i = 0 ; i < lenSize; i++){
                if(i == 0){
                    nodePre = deque.peek();
                    deque.poll();
                    node = nodePre;
                }else{
                    node = deque.peek();
                    deque.poll();
                    nodePre.next = node;
                    nodePre = nodePre.next;
                }
                if(node.left != null){
                    deque.offer(node.left);
                }
                if(node.right != null){
                    deque.offer(node.right);
                }
            }
            nodePre.next = null;
        }
        return root;
        }
        }
