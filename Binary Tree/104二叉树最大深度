/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        int count = 0;
        if(root == null){
            return count;
        }
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offer(root);
        while( !deque.isEmpty()){
            int lenSize = deque.size();
            while(lenSize > 0){
                TreeNode temp = deque.poll();
                if(temp.left != null){
                    deque.offer(temp.left);
                }
                if(temp.right != null){
                    deque.offer(temp.right);
                }
                lenSize--;
            }
            count++;
        }
        return count;
        // int count = 0;
        // if(root == null){
        //     return count;
        // }
        // Queue<TreeNode> que = new LinkedList<>();
        // que.offer(root);
        // while(!que.isEmpty()){
        //     int len = que.size();
        //     for(int i=0; i<len; i++){
        //         TreeNode tempNode = que.poll();
        //         if(tempNode.left != null){
        //             que.offer(tempNode.left);
        //         }
        //         if(tempNode.right != null){
        //             que.offer(tempNode.right);
        //         }
        //     }
        //     count++;
        // }
        // return count;
    }
}
==================================================================================================
以下是两种递归法，相比BFS要简单许多。
class Solution {
    public int maxDepth(TreeNode root) {
        // if(root == null){
        //     return 0;
        // }
        // return Math.max(maxDepth(root.left), maxDepth(root.right))+1;
        if(root == null){
            return 0;
        }
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return 1+Math.max(leftDepth,rightDepth);
    }
}
