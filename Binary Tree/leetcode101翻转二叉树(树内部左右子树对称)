/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
    //使用迭代法完成
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offerFirst(root.left);
        deque.offerLast(root.right);
        while(!deque.isEmpty()){
            TreeNode leftNode = deque.pollFirst();
            TreeNode rightNode = deque.pollLast();
            if(leftNode == null && rightNode == null){
                continue;
            }
            if(leftNode == null || rightNode == null || leftNode.val != rightNode.val){
                return false;
            }
            deque.offerFirst(leftNode.left);
            deque.offerLast(rightNode.right);
            deque.offerFirst(leftNode.right);
            deque.offerLast(rightNode.left);
        }
        return true;
        //只能使用后序递归完成，因为要先获取左右子树的信息。
    //     return compare(root.left, root.right);
    // }
    // public boolean compare(TreeNode left, TreeNode right){
    //     if(left == null && right != null){
    //         return false;
    //     }
    //     if(left != null && right == null){
    //         return false;
    //     }
    //     if(left == null && right == null){
    //         return true;
    //     }
    //     if(left.val != right.val){
    //         return false;
    //     }
    //     boolean compareOutside = compare(left.left, right.right);
    //     boolean compareInside = compare(left.right, right.left);
    //     return compareOutside && compareInside;
    } 
}
===================================================================================================================
另一种递归的写法，与上面基本相同，只是运用了if-else if -else的写法：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return compare(root.left,root.right);
    }
    public boolean compare(TreeNode left, TreeNode right){
         if (left == null && right == null) {
                return true;
            } else if (left == null || right == null) {
                return false;
            } else if (left.val != right.val) {
                return false;
            } else {
                boolean outer = compare(left.left, right.right);
                boolean inner = compare(left.right, right.left);
                return outer && inner;
            }
    }
}
===============================================================================================
用双端队列：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offerFirst(root.left);
        deque.offerLast(root.right);
        while(!deque.isEmpty()){
            TreeNode leftNode = deque.pollFirst();
            TreeNode rightNode = deque.pollLast();
            if(leftNode == null && rightNode == null){
                continue;
            }else if(leftNode == null || rightNode == null){
                return false;
            }else if(leftNode.val != rightNode.val){
                return false;
            }else{
                deque.offerFirst(leftNode.left);
                deque.offerFirst(leftNode.right);
                deque.offerLast(rightNode.right);
                deque.offerLast(rightNode.left);
            }
        }
        return true;
    }
}
