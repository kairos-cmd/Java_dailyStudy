/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> arrFirst = new ArrayList<>();
        if(root == null){
            return arrFirst;
        }
        List<Integer> path = new ArrayList<>();
        traversal(root, path, arrFirst);
        return arrFirst;
    }
    public void traversal(TreeNode root, List<Integer> path, List<String> result){
        path.add(root.val);
        if(root.left == null && root.right == null){
            //这里也可以使用StringBuilder加快速度
            //StringBuilder stringB = new StringBuilder(); 
            String sPath = "";
            for(int i = 0; i < path.size() - 1; i++){
                //stringB.append(path.get(i)).append("->");
                sPath += path.get(i);
                sPath += "->";
            }
            //stringB.append(path.get(path.size()-1));
            //result.add(stringB.toString());
            sPath += path.get(path.size()-1);
            result.add(sPath);
            return;
        }
         // 递归和回溯是同时进行，所以要放在同一个花括号里
        if(root.left != null){
            traversal(root.left, path, result);
            path.remove(path.size()-1); //回溯
        }
        if(root.right != null){
            traversal(root.right, path, result);
            path.remove(path.size()-1);//回溯
        }
    }
}
