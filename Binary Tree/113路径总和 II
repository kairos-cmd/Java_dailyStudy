/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        List<Integer> temp = new ArrayList<>();
        searchDepth(result, temp, targetSum, root);
        return result;
    }
    public boolean searchDepth(List<List<Integer>> result, List<Integer> temp, int targetSum, TreeNode root){
        //不加入会出现越界
        temp.add(root.val);
        targetSum -= root.val;
        if(root.left == null && root.right == null && targetSum == 0){
            result.add(new ArrayList<>(temp));
            return true;
        }
        if(root.left != null){
            boolean left = searchDepth(result,temp,targetSum,root.left);
            temp.remove(temp.size()-1);
        }
        if(root.right != null){
            boolean right = searchDepth(result,temp,targetSum,root.right);
            temp.remove(temp.size()-1);
        }
        return false;
    }
}
