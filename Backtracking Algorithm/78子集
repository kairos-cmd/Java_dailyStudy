组合问题和分割问题都是收集树的叶子节点，而子集问题是找树的所有节点
那么既然是无序，取过的元素不会重复取，写回溯算法的时候，for就要从startIndex开始，而不是从0开始
=========================================================================================================
问题1：什么时候for可以从0开始呢？
答：求排列问题的时候，就要从0开始，因为集合是有序的，{1, 2} 和{2, 1}是两个集合
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> temp = new ArrayList<>();
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        if(nums == null){
            return result;
        }
        backTracking(nums, 0);
        return result;
    }
    private void backTracking(int[] nums, int startIndex) {
        result.add(new ArrayList<>(temp));
        for(int i = startIndex; i < nums.length; i++){
            if( i > startIndex && nums[i] == nums[i-1]){ //比如1，2，2
                continue;
            }
            temp.add(nums[i]);
            backTracking(nums,i+1);
            temp.remove(temp.size()-1);
        }
    }
}
=================================================================================================================
利用used boolean类型数组来去重
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> temp = new ArrayList<>();
    boolean[] used;
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        used = new boolean[nums.length];
        Arrays.sort(nums);
        if(nums == null){
            return result;
        }
        backTracking(nums, 0);
        return result;
    }
    private void backTracking(int[] nums, int startIndex) {
        result.add(new ArrayList<>(temp));
        for(int i = startIndex; i < nums.length; i++){
            if(i>0 && nums[i-1] == nums[i] && !used[i-1]){
                continue;
            }
            temp.add(nums[i]);
            used[i] = true;
            backTracking(nums,i+1);
            used[i] = false;
            temp.remove(temp.size()-1);
        }
    }
}
