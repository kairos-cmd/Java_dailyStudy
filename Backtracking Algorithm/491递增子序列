class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> temp = new ArrayList<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        backTracking(nums,0);
        return result;
    }
    public void backTracking(int[] nums, int startIndex){
        if(temp.size() >= 2){
            result.add(new ArrayList<>(temp));
        }
        HashSet<Integer> hs = new HashSet<>();
        for(int i = startIndex; i < nums.length; i++){
        //下面这个条件里面，前两步是判断递增，后面条件是判断同一树层不重复
            if(!temp.isEmpty() && temp.get(temp.size()-1) > nums[i] || hs.contains(nums[i])){
                continue;
            }
            temp.add(nums[i]);
            hs.add(nums[i]);
            backTracking(nums,i+1);
            //不用hs.remove()原因是，不同层是不同的hashset，同一层用同一个不重复就可以
            temp.remove(temp.size()-1);
        }
    }
}
