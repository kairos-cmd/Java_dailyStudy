class Solution {
    List<List<String>> result = new ArrayList<>();
    LinkedList<String> temp = new LinkedList<>(); //用链表和双端队列都是可以的
    public List<List<String>> partition(String s) {
        backTracking(s, 0);
        return result;
    }
    public void backTracking(String s, int startIndex){
        if(startIndex >= s.length()){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i=startIndex; i<s.length(); i++){
            if(isPalindrome(s, startIndex, i)){
                String str = s.substring(startIndex, i+1);
                temp.add(str);
            }else{
                continue;
            }
            backTracking(s, i+1);
            temp.removeLast();
        }
    }
    public boolean isPalindrome(String s, int startIndex, int end){
        for(int i=startIndex, j=end; i<j; i++, j--){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
        }
        return true;
    }
}
====================================================================================================
8.12新代码：
class Solution {
    List<List<String>> result = new ArrayList<>();
    List<String> temp = new ArrayList<>(); //使用的是ArrayList
    public List<List<String>> partition(String s) {
        if(s.length() == 0){
            return result;
        }
        backTracking(s,0);//从索引0开始
        return result;
    }
    private void backTracking(String s, int startIndex) {
        if(startIndex >= s.length()){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i = startIndex; i < s.length(); i++){
            if(isPalindrome(s,startIndex,i)){
                String str = s.substring(startIndex,i+1);//index区间问题
                temp.add(str);
            }else{
                continue;
            }
            backTracking(s,i+1);//纵向递归到下一个字符
            temp.remove(temp.size()-1);
        }
    }
    private boolean isPalindrome(String s, int startIndex, int end) {
        int left = startIndex;
        int right = end;
        while(left < right){
            if(s.charAt(left) == s.charAt(right)){
                left++;
                right--;
            }else{
                return false;
            }
        }
        return true;
    }
}
本题递归函数参数还需要startIndex，因为切割过的地方，不能重复切割，和组合问题也是保持一致的。
