class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        summation(k,n,1,0);
        return result;
    }
    public void summation(int k, int n, int startIndex, int sum){
        if(sum > n){
            return;
        }
        if(path.size()==k){
            if(sum == n){
                result.add(new ArrayList<>(path));
                return;
            }
        }
        for(int i=startIndex; i<=9-(k-path.size())+1; i++){
            path.add(i);
            sum += i;
            summation(k, n, i+1, sum);
            path.removeLast();
            sum -= i;
        }
    }
}
